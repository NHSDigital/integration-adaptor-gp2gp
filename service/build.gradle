plugins {
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'java'
	id "checkstyle"
	id "com.github.spotbugs" version "6.0.22"
	id "io.freefair.lombok" version "8.6"
	id 'jacoco'

	// Mutation testing
	id 'info.solidsoft.pitest' version '1.15.0'
	id 'com.arcmutate.github' version '1.2.1'
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"
apply plugin: 'application'

mainClassName = ' uk.nhs.adaptors.gp2gp.Gp2gpApplication'

group = 'uk.nhs.adaptors'
sourceCompatibility = '21'

checkstyle {
	toolVersion '8.38'
	configDirectory = 'checkstyle' as File
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework:spring-jms'

	// Use version specified in spring-boot-starter-web
	implementation 'com.fasterxml.jackson.core:jackson-databind'

	// WebClient
	implementation ('org.springframework.boot:spring-boot-starter-webflux')

	// Logging
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	// Infrastructure
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.767'
	implementation ('com.azure:azure-storage-blob:12.27.1')
	implementation 'org.apache.qpid:qpid-jms-client:2.5.0'

	// Utils
	implementation 'org.apache.commons:commons-lang3:3.15.0'
	implementation 'javax.xml.soap:javax.xml.soap-api:1.4.0'
	implementation 'com.github.spullara.mustache.java:compiler:0.9.14'
	implementation 'org.apache.tika:tika-core:2.9.2'

	// Fhir
	implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:7.4.0'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.assertj:assertj-core:3.26.3"
	testImplementation 'org.testcontainers:testcontainers:1.20.1'
	testImplementation 'org.awaitility:awaitility:4.2.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.3'
	testImplementation 'org.wiremock:wiremock-standalone:3.9.1'
	testImplementation 'com.squareup.okhttp3:okhttp:4.12.0'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'

	pitest 'com.arcmutate:base:1.3.1'
	pitest 'com.arcmutate:pitest-git-plugin:1.3.2'
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/intTest/java')
		}

		resources {
			srcDir file('src/intTest/resources')
		}
	}
}

task(interoperabilityTestingToolJsonToXml, dependsOn: 'classes', type: JavaExec) {
	mainClass.set('uk.nhs.adaptors.gp2gp.transformjsontoxmltool.TransformJsonToXml')
	classpath = sourceSets.main.runtimeClasspath
}

configurations {
	integrationTestCompileOnly.extendsFrom testCompileOnly
	integrationTestImplementation.extendsFrom testImplementation
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

task integrationTest(type: Test) {
	useJUnitPlatform() {
		description = 'Runs integration tests.'
		group = 'verification'

		testClassesDirs = sourceSets.integrationTest.output.classesDirs
		classpath = sourceSets.integrationTest.runtimeClasspath
		shouldRunAfter test
	}
}

tasks.withType(Test) {
	testLogging {
		events "passed", "skipped", "failed"
	}
}

check.dependsOn integrationTest
jacocoTestReport.dependsOn integrationTest

spotbugsTest.enabled = false
spotbugsIntegrationTest.enabled = false
spotbugsMain {
	reports {
		html {
			enabled = true
		}
		xml {
			enabled = true
		}
		excludeFilter.set(file("spotbugs/exclude.xml"))
	}
}

pitest {
	pitestVersion = '1.16.1'
	junit5PluginVersion = '1.2.1'
	outputFormats = ['gitci']

	// git feature limits analysis to contents of PR only
	features = ["+GIT(from[HEAD~1])"]

	// PRs which don't introduce any production code changes, shouldn't fail the Mutation Testing Actions Workflow
        failWhenNoMutations = false

	mutators = ['STRONGER', 'EXTENDED_ALL']

	threads = project.getGradle().getStartParameter().getMaxWorkerCount()
}

bootJar {
	exclude("**/TransformJsonToXml*")
}
