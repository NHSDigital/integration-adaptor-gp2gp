version: '3.4'

services:
  gp2gp:
    image: ${GP2GP_IMAGE:-local/gp2gp:latest}
    build:
      context: ../
      dockerfile: docker/service/Dockerfile
    depends_on:
      - mongodb
      - activemq
    ports:
      - "8080:8080"
    environment:
      - GP2GP_SERVER_PORT
      - GP2GP_LOGGING_LEVEL
      - GP2GP_AMQP_BROKERS
      - GP2GP_AMQP_USERNAME
      - GP2GP_AMQP_PASSWORD
      - GP2GP_AMQP_MAX_REDELIVERIES
      - GP2GP_MONGO_URI
      - GP2GP_MONGO_DATABASE_NAME
      - GP2GP_MONGO_TTL
      - GP2GP_COSMOS_DB_ENABLED
      - GP2GP_STORAGE_TYPE
      - GP2GP_STORAGE_CONTAINER_NAME
      - GP2GP_MHS_OUTBOUND_URL
      - AZURE_STORAGE_CONNECTION_STRING
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_REGION
      - GP2GP_GPC_GET_URL
      - GP2GP_GPC_GET_STRUCTURED_ENDPOINT
      - GP2GP_GPC_GET_DOCUMENT_ENDPOINT
      - GP2GP_GPC_ENABLE_HTTP_PROXY
      - GP2GP_GPC_HTTP_PROXY
      - GP2GP_GPC_HTTP_PROXY_PORT
      - GP2GP_SPINE_CLIENT_CERT
      - GP2GP_SPINE_CLIENT_KEY
      - GP2GP_SPINE_ROOT_CA_CERT
      - GP2GP_SPINE_SUB_CA_CERT
      - GP2GP_SSL_TRUST_STORE_URL
      - GP2GP_SSL_TRUST_STORE_PASSWORD

  mock-mhs-adaptor:
    build:
      context: ../
      dockerfile: docker/mock-mhs-adaptor/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - MOCK_MHS_SERVER_PORT=8081
      - MOCK_MHS_LOGGING_LEVEL
      - GP2GP_MHS_INBOUND_QUEUE=inbound
      - GP2GP_AMQP_BROKERS=amqp://activemq:5672
      - GP2GP_AMQP_USERNAME
      - GP2GP_AMQP_PASSWORD
      - GP2GP_AMQP_MAX_REDELIVERIES

  mongodb:
    image: mongo
    ports:
      - "27017:27017"

  activemq:
    build:
      context: ./activemq
    ports:
      - "8161:8161"
      - "5672:5672"

  wiremock:
    build: ./wiremock
    ports:
      - "8110:8080"
    command:
      - -global-response-templating
